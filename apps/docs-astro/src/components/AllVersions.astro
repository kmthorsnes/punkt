---
import heartIcon from "@oslokommune/punkt-assets/dist/icons/heart.svg?raw";
---

<div id="versionsContainer" class="versions-container pkt-grid"></div>

<script define:vars={{ heartIcon }} is:inline>
  const vAllVersionsEl = document.getElementById("versionsContainer");

  async function fetchVersions() {
    const response = await fetch(
      "https://punkt-cdn.oslo.kommune.no/versions.json"
    );
    return (await response.json()).versions;
  }
  async function sortAndReverseVersions(versions) {
    return versions.sort().reverse();
  }

  async function createLists() {
    const allVersions = await fetchVersions();
    if (!allVersions) return;

    const sortedVersions = await sortAndReverseVersions(allVersions);
    const docsDomain = "https://punkt.oslo.kommune.no";

    // Grupper versjonene etter major versjon
    const groupedVersions = sortedVersions.reduce((acc, version) => {
      const majorVersion = version.split(".")[0];
      if (!acc[majorVersion]) {
        acc[majorVersion] = [];
      }
      acc[majorVersion].push(version);
      return acc;
    }, {});

    // Sort the major versions in descending order
    const sortedMajorVersions = Object.keys(groupedVersions).sort(
      (a, b) => b - a
    );

    // Sort the versions within each major version group in descending order
    for (const majorVersion of sortedMajorVersions) {
      groupedVersions[majorVersion].sort((a, b) => b - a);
    }

    // Generer HTML for hver major versjon
    const generateListHtml = (majorVersion, versions, highestMajorVersion) => {
      const listItems = versions
        .map((version, index) => {
          const isNewest = majorVersion === highestMajorVersion && index === 0;
          const badge = isNewest
            ? `<span class="status-badge status-badge--info"><span class="status-badge__icon">${heartIcon}</span><span>Siste versjon</span>`
            : "";

          return `<li><a href="${docsDomain}/${version}" class="version__link">${version}${badge}</a></li>`;
        })
        .join("");
      return `
      <div class="version pkt-cell pkt-cell--span12 pkt-cell--span6-tablet-big-up">
    <h3 class="version__header">v${majorVersion}.x</h3>
    <p>
      Alle mindre releaser fra v${majorVersion} er oppf√∏rt nedenfor.
      Siste oppdatering var v${versions[0]}.
    </p>
    <ul>
      ${listItems}
    </ul>
    </div>
  `;
    };

    // Injiser den genererte HTMLen i container elementet
    for (const majorVersion of sortedMajorVersions) {
      const listHtml = generateListHtml(
        majorVersion,
        groupedVersions[majorVersion],
        sortedMajorVersions[0]
      );
      vAllVersionsEl.innerHTML += listHtml;
    }
  }
  createLists();
</script>

<style is:global lang="scss">
  @use "sass:map";
  @use "@pkt/scss/abstracts/variables";
  @use "@pkt/scss/abstracts/mixins/breakpoints" as *;
  @use "@pkt/scss/abstracts/mixins/typography";

  .versions-container {
    padding: 5rem 0;
    gap: 4rem 2rem !important;

    @include bp("laptop-up") {
      gap: 4rem 4rem !important;
    }

    .version {
      border-top: 1px solid var(--pkt-color-brand-dark-blue-1000);

      &__header {
        margin-top: 1rem;
      }

      &__link {
        @include typography.get-text("pkt-txt-22");
        display: flex;
        flex-wrap: nowrap;
        justify-content: space-between;
        align-items: center;
        text-decoration: none;
        border-bottom: 1px solid var(--pkt-color-grays-gray-100);
        padding: 0.75rem 0;
      }
    }

    .status-badge__icon {
      width: 1rem;
      height: 1rem;

      svg {
        vertical-align: initial;
      }
    }
  }
  .versions-container ul {
    margin: 0;
    padding: 0;
  }
  .versions-container li {
    list-style: none;
    margin: 0;
    padding: 0;
  }
</style>
